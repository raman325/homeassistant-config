[
    {
        id: ifttt_vacuum_control
        alias: IFTTT Vacuum Control
        initial_state: true
        trigger:
        {
            platform: webhook
            webhook_id: !secret webhook_vacuum
        }
        condition:
        {
            condition: template
            value_template: !secret webhook_auth_check
        }
        action:
        {
            service: rest_command.ir_send
            data_template:
            {
                target: "{{ trigger.json.target }}"
                command: "{{ trigger.json.command }}"
            }
        }
    }
    {
        id: ifttt_kodi_control
        alias: IFTTT Kodi Control
        initial_state: true
        trigger:
        {
            platform: webhook
            webhook_id: !secret webhook_ghkodi
        }
        condition:
        {
            condition: template
            value_template: !secret webhook_auth_check
        }
        action:
        {
            service: rest_command.kodi_send
            data_template:
            {
                token: "{{ trigger.json.token }}"
                kodiid: "{{ trigger.json.kodiid }}"
                phrase: "{{ trigger.json.phrase }}"
            }
        }
    }
    {
        id: notify_updates
        alias: Update Available Notifications
        trigger:
        {
            platform: state
            entity_id: sensor.available_ha_version
        }
        condition:
        {
            condition: template
            value_template: '{% set curr_ver = states("sensor.local_ha_version").split(".") %}{% set new_ver = states("sensor.available_ha_version").split(".") %}{{ new_ver[0]|int > curr_ver[0]|int or new_ver[1]|int > curr_ver[1]|int or (new_ver[0]|int == curr_ver[0]|int and new_ver[1]|int == curr_ver[1]|int and new_ver[2]|int > curr_ver[2]|int) }}'
        }
        action:
        {
            service: notify.apprise
            data:
            {
                title: 'New HA version {{ states("sensor.available_ha_version") }} available'
                message: 'https://www.home-assistant.io/latest-release-notes/ \n {% if states("sensor.potential_breaking_changes")|int > 0 %}{{ states("sensor.potential_breaking_changes") }} possible breaking changes:\n```{% for k, v in states.sensor.potential_breaking_changes.attributes.items() %}{% if k not in ["friendly_name", "icon"] %}{{ k }}:{{ v }}\n{% endif %}{% endfor %}```{% else %}No breaking changes detected.{% endif %}'
                target: system
            }
        }
    }
    {
        id: raman_on_zoom
        alias: Slack when Raman on Zoom
        trigger:
        {
            platform: state
            entity_id: binary_sensor.zoom_raman
            from: off
            to: on
        }
        condition:
        {
            condition: state
            entity_id: input_boolean.zoom_dnd_raman
            state: off
        }
        action:
        [
            {
                service: notify.apprise
                data:
                {
                    title: "Do Not Disturb!"
                    message: "Raman is *on* a Zoom call"
                    target: zoom
                }
            }
            {
                service: input_boolean.turn_on
                entity_id: input_boolean.zoom_dnd_raman
            }
        ]
    }
    {
        id: raman_off_zoom
        alias: Slack when Raman off Zoom
        trigger:
        {
            platform: state
            entity_id: binary_sensor.zoom_raman
            from: on
            to: off
            for: 00:01:00
        }
        condition:
        {
            condition: state
            entity_id: input_boolean.zoom_dnd_raman
            state: on
        }
        action:
        [
            {
                service: notify.apprise
                data:
                {
                    title: "You Can Come In Now"
                    message: Raman is *off* Zoom
                    target: zoom
                }
            }
            {
                service: input_boolean.turn_off
                entity_id: input_boolean.zoom_dnd_raman
            }
        ]
    }
    {
        id: home_away
        alias: Home Mode: Away
        trigger:
        {
            platform: state
            entity_id: input_select.home_mode
            to: Away
        }
        action:
        [
            {
                service: climate.set_temperature
                data:
                {
                    entity_id: climate.thermostat
                    target_temp_high: "{{ states('input_select.away_high') }}"
                    target_temp_low: "{{ states('input_select.away_low') }}"
                }
            }
        ]
    }
    {
        id: home_home
        alias: Home Mode: Home
        trigger:
        {
            platform: state
            entity_id: input_select.home_mode
            to: Home
        }
        action:
        [
            {
                service: climate.set_temperature
                data:
                {
                    entity_id: climate.thermostat
                    target_temp_high: "{{ states('input_select.home_high') }}"
                    target_temp_low: "{{ states('input_select.home_low') }}"
                }
            }
        ]
    }
    {
        id: home_night
        alias: Home Mode: Night
        trigger:
        {
            platform: state
            entity_id: input_select.home_mode
            to: Night
        }
        action:
        [
            {
                service: climate.set_temperature
                data:
                {
                    entity_id: climate.thermostat
                    target_temp_high: "{{ states('input_select.night_high') }}"
                    target_temp_low: "{{ states('input_select.night_low') }}"
                }
            }
        ]
    }
]
